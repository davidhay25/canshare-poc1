Handlers removed from modelsCtrl



            function clearSsDetails() {
                delete $scope.input.ssDiff
                delete $scope.input.ssFullDiff
                delete $scope.input.ssOverride
                delete $scope.input.ssChangeItemEd
            }

            $scope.getLogDG = function (row) {


                //$scope.input.ssFilter = row.dgName
                $scope.selectedLogDg = snapshotSvc.getDG(row.dgName)
                $scope.selectedLogRow = row
                //$scope.ssRelationshipsSummary = snapshotSvc.getRelationshipsSummary(row.dgName)
                clearSsDetails()
            }

            $scope.showSSLog = function (dgName) {
                $scope.selectedLogDg = snapshotSvc.getDG(dgName)
                $scope.input.ssFilter = $scope.selectedLogDg
                $scope.input.mainTabActive = $scope.ui.tabSnapshot
                clearSsDetails()
            }

            //when a parent or child is clicked
            $scope.ssGetDG = function(dgName) {
                $scope.ssHx.push(dgName)
                clearSsDetails()
                $scope.selectedLogDg = snapshotSvc.getDG(dgName)
                $scope.selectedLogRow = {}


                for (const dg of $scope.lstAllDGSS) {
                    if (dg.name == dgName) {
                        $scope.input.ssFilter = dg
                    }
                }
            }

            $scope.ssBack = function () {
                $scope.ssHx.pop()  //the last one is the current dg
                let dgName = $scope.ssHx.pop()
                if (dgName) {
                    $scope.ssGetDG(dgName)
                }
            }

            //get a single DG
            $scope.setDGSS = function (dg) {
                $scope.selectedLogDg = dg
            }

            $scope.showSSLogRow = function (row) {
                if (! $scope.input.ssFilter) {return true}

                if (row.dgName == $scope.input.ssFilter.name) {
                    return true
                }

            }

            $scope.ssLogPanel = 'col-md-6'
            $scope.ssDisplayPanel = 'col-md-6'
            let ssLogShown = true

            $scope.toggleLog = function(){
                if (ssLogShown) {
                    $scope.ssLogPanel = 'hidden'
                    $scope.ssDisplayPanel = 'col-md-12'
                } else {
                    $scope.ssLogPanel = 'col-md-6'
                    $scope.ssDisplayPanel = 'col-md-6'
                }
                ssLogShown = ! ssLogShown

            }


            $scope.showSsErrorItem = function(log,type){
                if (log.isError) {
                    if (! type || type == 'All') {
                        return true
                    } else {
                        if (log.isError == type) {
                            return true
                        }
                    }
                }


            }


            function validateModelDEP() {
                // validate the model. This retruns a hash of all types defined in the model as well as errors
                let vo1 = modelsSvc.validateModel($localStorage.world)
                $scope.errors = vo1.errors
                $scope.input.types = vo1.types      //a hash keyed by name
                $scope.input.arTypes = Object.keys(vo1.types)       //list of types foe new element dropdown

                //a hash by type of all elements that reference it
                $scope.analysis = modelsSvc.analyseWorld($localStorage.world,$scope.input.types)

            }

                        $scope.showTraceDEP = function () {
                            $uibModal.open({
                                templateUrl: 'modalTemplates/trace.html',
                                backdrop: 'static',
                                size : 'xlg',
                                controller: 'traceCtrl',
                                resolve: {
                                    hashAllDG: function () {
                                        return $scope.hashAllDG
                                    },
                                    currentDG: function () {
                                        return $scope.selectedModel
                                    },
                                    user: function () {
                                        return $scope.user
                                    }
                                }}).result.then(function (hashChanges) {

                                    if ($scope.selectedModel && hashChanges[$scope.selectedModel.name]) {
                                        //Has the current model been changed? If so, re-select
                                        $scope.selectModel($scope.selectedModel)

                                    }

                            })


                        }

            //display the tree with categories
            function showCategoryDGTreeDEP(treeData) {
                $('#categoryDGTree').jstree('destroy');

                $scope.categoryDGTree = $('#categoryDGTree').jstree(
                    {'core': {'multiple': false, 'data': treeData,
                            'themes': {name: 'proton', responsive: true}}}
                ).on('changed.jstree', function (e, data) {

                    if (data.node) {
                        let dg = data.node.data.dg

                        //use the dg out of $scope.hashAllDG - not the copy in the tree data
                        $scope.selectModel($scope.hashAllDG[dg.name])
                    }

                    $scope.$digest();       //as the event occurred outside of angular...
                }).bind("loaded.jstree", function (event, data) {
                    let id = treeData[0].id
                    $(this).jstree("open_node",id);

                    $scope.$digest();
                });
            }

