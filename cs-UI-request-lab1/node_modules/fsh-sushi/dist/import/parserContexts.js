"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasPathRule = exports.containsCodePathContext = exports.containsPathContext = exports.isStarContext = void 0;
function isStarContext(ctx) {
    return ctx.STAR != null;
}
exports.isStarContext = isStarContext;
function containsPathContext(ctx) {
    return ctx.path != null;
}
exports.containsPathContext = containsPathContext;
function containsCodePathContext(ctx) {
    // A code path comes from a concept, codeCaretValueRule, or codeInsertRule
    // So, detect a concept (with a non-empty CODE() list)
    // or a codeCaretValueRule (with a caretPath)
    // or a codeInsertRule (with a RULESET_REFERENCE or PARAM_RULESET_REFERENCE)
    return ((ctx.CODE != null && // If we have CODE,
        Array.isArray(ctx.CODE()) && // and it's a list,
        ctx.CODE().length > 0) || // and the list is not empty, or
        (ctx.caretPath != null && ctx.caretPath() != null) || // we have a non-null caretPath, or
        (ctx.RULESET_REFERENCE != null && ctx.RULESET_REFERENCE() != null) || // we have a non-null RULESET_REFERENCE, or
        (ctx.PARAM_RULESET_REFERENCE != null && ctx.PARAM_RULESET_REFERENCE() != null) // we have a non-null PARAM_RULESET_REFERENCE
    );
}
exports.containsCodePathContext = containsCodePathContext;
function hasPathRule(ctx) {
    return ctx.pathRule != null && ctx.pathRule() != null;
}
exports.hasPathRule = hasPathRule;
//# sourceMappingURL=parserContexts.js.map